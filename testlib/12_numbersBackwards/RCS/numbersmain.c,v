head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2023.02.08.00.47.10;	author pnico;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include <stdint.h>
/*
 * Author: Dr. Phillip Nico
 *         Department of Computer Science
 *         California Polytechnic State University
 *         One Grand Avenue.
 *         San Luis Obispo, CA  93407  USA
 *
 * Email:  pnico@@csc.calpoly.edu
 *
 * Revision History:
 *         $Log: numbersmain.c,v $
 *         Revision 1.2  2013-04-11 05:58:55-07  pnico
 *         Made compatible with the 64-bit update
 *
 *         Revision 1.1  2013-04-07 12:19:52-07  pnico
 *         Initial revision
 *
 *         Revision 1.2  2004-04-13 12:31:50-07  pnico
 *         checkpointing with listener
 *
 *         Revision 1.1  2004-04-13 09:53:55-07  pnico
 *         Initial revision
 *
 *         Revision 1.1  2004-04-13 09:52:46-07  pnico
 *         Initial revision
 *
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include "lwp.h"

#define NUMTHREADS 5

typedef void (*sigfun)(int signum);
static void indentnum(uintptr_t num);

int main(int argc, char *argv[]){
  long i;

  for (i=1;i<argc;i++) {                /* check options */
    fprintf(stderr,"%s: unknown option\n",argv[i]);
    exit(-1);
  }

  printf("Launching LWPS\n");

  /* spawn a number of individual LWPs */
  for(i=1;i<=NUMTHREADS;i++) {
    lwp_create((lwpfun)indentnum,(void*)i);
  }

  lwp_start();                     /* returns when the last lwp exits */

  for(i=1;i<=NUMTHREADS;i++) {
    lwp_wait(NULL);
  }

  printf("Back from LWPS.\n");
  return 0;
}

static void indentnum(uintptr_t num) {
  /* print the number num num times, indented by 5*num spaces
   * Not terribly interesting, but it is instructive.
   */
  int howfar,i;

  howfar=(int)num;              /* interpret num as an integer */
  for(i=0;i<NUMTHREADS-howfar+1;i++){
    printf("%*d\n",howfar*5,howfar);
    lwp_yield();                /* let another have a turn */
  }
  lwp_exit(0);                  /* bail when done.  This should
                                 * be unnecessary if the stack has
                                 * been properly prepared
                                 */
}

@
